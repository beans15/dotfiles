" NeoBundleでの管理を行う
" 一時的にファイルタイプを無効に
filetype off

if g:portable
  " NeoBundleへのパスを追加
  set rtp+=$VIM/vimfiles/bundle/neobundle.vim/
  " NeoBundleを初期化
  call neobundle#rc($VIM.'/vimfiles/bundle')
else
  set rtp+=~/.vim/bundle/neobundle.vim/
  call neobundle#rc(expand('~/.vim/bundle'))
endif


" プラグインのロード
" 汎用的なもの
NeoBundle 'Shougo/vimproc', {
  \ 'build': {
  \     'windows': 'echo "Sorry, cannot update vimproc binary file in Windows."',
  \     'cygwin': 'make -f make_cygwin.mak',
  \     'mac': 'make -f make_mac.mak',
  \     'unix': 'make -f make_unix.mak',
  \   },
  \ }
"NeoBundle 'Lokaltog/powerline', { 'rtp': 'powerline/bindings/vim' }
"NeoBundle 'Lokaltog/vim-powerline'
"NeoBundle 'bling/vim-airline'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'surround.vim'
NeoBundle 'unite.vim'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'sgur/unite-qf'
NeoBundle 'tsukkee/unite-help'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'deton/jasegment.vim'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'kana/vim-textobj-indent'
NeoBundle 'kana/vim-smartinput'

" 開発用
NeoBundle 'neocomplcache'
NeoBundle 'Shougo/neosnippet'
"NeoBundle 'http://conque.googlecode.com/svn/trunk/'
NeoBundle 'quickrun'
NeoBundle 'thinca/vim-ref'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'tpope/vim-fugitive'
NeoBundleLazy 'Shougo/vimshell', {'autoload': {'commands': ['VimShell']}}
"NeoBundle 'taglist.vim'

" 特定言語の開発用
NeoBundleLazy 'vim-coffee-script', {'autoload': {'filetypes': ['coffee']}}
"NeoBundleLazy 'mattn/zencoding-vim', {'autoload': {'filetypes': ['html', 'htmldjango']}}
NeoBundleLazy 'mattn/emmet-vim', {'autoload': {'filetypes': ['html', 'css', 'scss', 'php']}}
if has('python')
  NeoBundleLazy 'davidhalter/jedi-vim', {'autoload': {'filetypes': ['python']}}
endif
"NeoBundle 'python_fold'

" その他
NeoBundle 'mattn/webapi-vim'
NeoBundleLazy 'mattn/gist-vim', {'autoload': {'commands': ['Gist']}}
NeoBundleLazy 'sudo.vim', {'autoload': {'commands': ['SudoRead', 'SudoWrite']}}

" カラースキーム
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'nanotech/jellybeans.vim'
"NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'tomasr/molokai'
"NeoBundle 'jpo/vim-railscasts-theme'
"NeoBundle 'vim-scripts/Wombat'
"NeoBundle 'vim-scripts/twilight'
NeoBundle 'altercation/vim-colors-solarized'

NeoBundleLazy 'beans15/vim-latex', {'autoload': {'filetypes': ['tex']}}

NeoBundle 'thinca/vim-localrc'


"==================
" neocomplcache
"==================

" 起動時に有効にする
let g:neocomplcache_enable_at_startup = 1
" 大文字小文字が混じっている場合は、大文字小文字を区別する
let g:neocomplcache_enable_smart_case = 1
" キーワードの最小長さを3文字に
let g:neocomplcache_min_syntax_length = 3
" 補完候補の先頭を選択状態に
"let g:neocomplcache_enable_auto_select = 1


"==================
" neosnippet
"==================

" スニペットのディレクトリを指定
let g:neosnippet#snippets_directory = expand('~/.vim/snippets')
" スニペット補完のキーバインド
imap <silent><C-l> <Plug>(neosnippet_expand_or_jump)
smap <silent><C-l> <Plug>(neosnippet_expand_or_jump)

let g:neosnippet#enable_snipmate_compatibility = 1


"==================
" zencoding-vim
"==================
"
"let g:user_zen_settings = {
"\   'lang': 'ja',
"\   'indentation': '    ',
"\   'css': {
"\     'filters': 'fc',
"\   }
"\}


"==================
" unite
"==================

" インサートモードで開始
let g:unite_enable_start_insert = 1

"imap <silent> <C-k>  <Plug>(neocomplcache_start_unite_complete)
nnoremap [unite] <Nop>
nmap     <Leader>u [unite]
nmap     <Space>u [unite]
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file file/new directory/new<CR>
nnoremap <silent> [unite]u :<C-u>Unite -buffer-name=files file_mru buffer<CR>
nnoremap <silent> [unite]a :<C-u>Unite -buffer-name=files file buffer file_mru file/new<CR>
nnoremap <silent> [unite]b :<C-u>Unite -buffer-name=files bookmark<CR>
nnoremap <silent> [unite]t :<C-u>Unite -immediately tab:no-current<CR>
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register -no-start-insert register<CR>
nnoremap <silent> [unite]/ :<C-u>Unite -winheight=10 -auto-highlight line<CR>
nnoremap <silent> [unite]* :<C-u>UniteWithCursorWord -no-start-insert -winheight=10 -auto-highlight line<CR>
nnoremap <silent> [unite]s :<C-u>Unite -no-start-insert source<CR>
nnoremap <silent> [unite]p :<C-u>call <SID>unite_project()<CR>
nnoremap <silent> [unite]o :<C-u>Unite -no-quit -vertical -no-start-insert -direction=rightbelow -winwidth=30 outline<CR>

function! s:unite_project(...)
  let opts = (a:0 ? join(a:000, ' ') : '')
  let dir = unite#util#path2project_directory(expand('%'))

  execute 'Unite '.opts.' file_rec:'.dir
endfunction

augroup UniteFileType
  autocmd!
  "autocmd FileType vim      nnoremap <silent><buffer> K :<C-u>UniteWithCursorWord help<CR>
  autocmd FileType sh       nnoremap <silent><buffer> K :<C-u>UniteWithCursorWord -default-action=right ref/man<CR>
  autocmd FileType python   nnoremap <silent><buffer> K :<C-u>UniteWithCursorWord -default-action=right ref/pydoc<CR>
  autocmd FileType ruby     nnoremap <silent><buffer> K :<C-u>UniteWithCursorWord -default-action=right ref/refe<CR>
augroup END

call unite#custom_source('file_rec', 'filters', ['matcher_fuzzy', 'sorter_default', 'converter_default'])

" unite-grepのバックエンドをagに変更
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nocolor --nogroup'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_max_candidates = 200
endif

"==================
" vimfiler
"==================

" セーフモードを無効にする
let g:vimfiler_safe_mode_by_default = 0

nnoremap <silent> <Leader>Ex :<C-u>VimFilerBufferDir -simple -explorer<CR>
nnoremap <silent> <Leader>Tex :<C-u>call <SID>vimfiler_tab_bufferdir()<CR>

function! s:vimfiler_tab_bufferdir()
  exec 'VimFilerTab -simple ' . expand('%:p:h')
endfunction

"==================
" vim-coffee-script
"==================

" 無名関数でラップしない
let g:coffee_make_options = '-b'


"==================
" vim-powerline
"==================

let g:Powerline_symbols = 'fancy'


"==================
" jedi
"==================

let g:jedi#show_function_definition = 0

" quickrunと衝突するので変更
let g:jedi#rename_command = 'R'
let g:jedi#pydoc = ''

"==================
" Conque
"==================

"let g:ConqueTerm_ReadUnfocused = 1
"let g:ConqueTerm_CloseOnEnd = 1
"let g:ConqueTerm_StartMessages = 0
"let g:ConqueTerm_CWInsert = 1
"noremap <silent> <Leader>sh :ConqueTermVSplit zsh<CR>
"noremap <silent> <Leader>py :ConqueTermVSplit ipython<CR>
"noremap <silent> <Leader>rb :ConqueTermVSplit irb<CR>
"noremap <silent> <Leader>sbt :ConqueTermVSplit sbt<CR>
"noremap <silent> <Leader>sc :ConqueTermVSplit scala<CR>
"
"" バッファを閉じたときにプロセスを終了するようにする
"function! s:delete_ConqueTerm(buffer_name)
"    let term_obj = conque_term#get_instance(a:buffer_name)
"    call term_obj.close()
"endfunction
"autocmd BufWinLeave zsh\s-\s? call <SID>delete_ConqueTerm(expand('%'))
"autocmd BufWinLeave ipython\s-\s? call <SID>delete_ConqueTerm(expand('%'))
"autocmd BufWinLeave irb\s-\s? call <SID>delete_ConqueTerm(expand('%'))
"autocmd BufWinLeave sbt\s-\s? call <SID>delete_ConqueTerm(expand('%'))
"autocmd BufWinLeave sc\s-\s? call <SID>delete_ConqueTerm(expand('%'))

"==================
" syntastic
"==================
let g:syntastic_mode_map = {
  \ 'mode':               'passive',
  \ 'active_filetypes':   [],
  \ 'passive_filetypes':  [] }

nnoremap <silent> <Leader>L :<C-u>SyntasticCheck<CR>

"==================
" smartinput
"==================
call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')

call smartinput#define_rule({
  \ 'at': '(\%#)',
  \ 'char': '<Space>',
  \ 'input': '<Space><Space><Left>',
  \ })

call smartinput#define_rule({
  \ 'at': '{\%#}',
  \ 'char': '<Space>',
  \ 'input': '<Space><Space><Left>',
  \ })

call smartinput#define_rule({
  \ 'at': '\[\%#\]',
  \ 'char': '<Space>',
  \ 'input': '<Space><Space><Left>',
  \ })

call smartinput#define_rule({
  \ 'at': '( \%# )',
  \ 'char': '<BS>',
  \ 'input': '<Del><BS>',
  \ })

call smartinput#define_rule({
  \ 'at': '{ \%# }',
  \ 'char': '<BS>',
  \ 'input': '<Del><BS>',
  \ })

call smartinput#define_rule({
  \ 'at': '\[ \%# \]',
  \ 'char': '<BS>',
  \ 'input': '<Del><BS>',
  \ })

" タグの間で改行した時に空行を作る
call smartinput#define_rule({
  \ 'at': '<\(\w\+\)\( .*\)\?>\%#<\/\1>',
  \ 'char': '<Enter>',
  \ 'input': '<Enter><C-O>O'
  \ })

" vimの辞書定義で自動的にバックスラッシュを入れる
call smartinput#define_rule({
  \ 'at': '^ *\\ *.*\%#$',
  \ 'char': '<Enter>',
  \ 'input': '<Enter><Bslash>',
  \ 'filetype': ['vim'],
  \ })

call smartinput#define_rule({
  \ 'at': '^ *function!\?.*\%#$',
  \ 'char': '<Enter>',
  \ 'input': '<Enter>endfunction<C-O>O',
  \ 'filetype': ['vim'],
  \ })

call smartinput#define_rule({
  \ 'at': '^ *if.*\%#$',
  \ 'char': '<Enter>',
  \ 'input': '<Enter>endif<C-O>O',
  \ 'filetype': ['vim'],
  \ })

"==================
" airline
"==================

let g:airline_theme = 'powerlineish'
let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0

"==================
" lightline
"==================

" リロードしたときにエラーが出るのを防ぐ
if !exists('g:lightline')
  let g:lightline = {
    \ 'colorscheme':  'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ],
    \ },
    \ 'component': {
    \   'readonly': '%{&readonly?"⭤":""}',
    \   'modified': '%{&modified?"+":&modifiable?"":"-"""}',
    \ },
    \ 'component_function': {
    \   'fugitive': 'MyFugitive',
    \   'fileformat': 'MyFileFormat',
    \   'filetype': 'MyFiletype',
    \   'fileencoding': 'MyFileencoding',
    \   'filename': 'MyFilename',
    \ },
    \ 'component_visible_condition': {
    \   'readonly': '&readonly',
    \   'modified': '(&modified||!&modifiable)',
    \ },
    \ }
endif

function! MyFilename()
  let filetype_mapping = {
    \ 'vimfiler': 'vimfiler#get_status_string()',
    \ 'unite': 'unite#get_status_string()',
    \ 'vimshell': "substitute(b:vimshell.current_dir, expand('~'), '~', '')",
    \ }

  if has_key(filetype_mapping, &ft)
    return eval(filetype_mapping[&ft])
  else
    return expand('%:t') != '' ? expand('%:t') : '[No Name]'
  endif
endfunction

function! MyFugitive()
  return exists('*fugitive#head') && len(fugitive#head()) ? '⭠ '.fugitive#head() : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyFileFormat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

"======================
" オレオレセッティング
"======================

if filereadable(expand('~/.vimrc.plugin.mine'))
  source ~/.vimrc.plugin.mine
endif

" ファイルタイプを有効にする
filetype plugin indent on

NeoBundleCheck
