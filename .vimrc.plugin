" NeoBundleでの管理を行う
" 一時的にファイルタイプを無効に
filetype off

" NeoBundleへのパスを追加
set rtp+=~/.vim/neobundle.vim.git/
" NeoBundleを初期化
call neobundle#rc(expand('~/.vim/bundle'))


" プラグインのロード
" 汎用的なもの
NeoBundle 'Shougo/vimproc'
NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'thinca/vim-localrc'
NeoBundle 'surround.vim'
NeoBundle 'sudo.vim'
NeoBundle 'unite.vim'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'Shougo/vimfiler'

" 開発用
NeoBundle 'neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/vimshell'
NeoBundle 'http://conque.googlecode.com/svn/trunk/'
NeoBundle 'quickrun'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'ZenCoding.vim'
"NeoBundle 'ref.vim'
"NeoBundle 'taglist.vim'

" 特定言語の開発用
NeoBundle 'vim-coffee-script'
NeoBundle 'davidhalter/jedi-vim'
"NeoBundle 'python_fold'

" カラースキーム
"NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'nanotech/jellybeans.vim'
"NeoBundle 'jonathanfilip/vim-lucius'
"NeoBundle 'tomasr/molokai'
"NeoBundle 'jpo/vim-railscasts-theme'
"NeoBundle 'vim-scripts/Wombat'
"NeoBundle 'vim-scripts/twilight'

NeoBundle 'beans15/vim-latex'


"==================
" neocomplcache
"==================

" 起動時に有効にする
let g:neocomplcache_enable_at_startup = 1
" 大文字小文字が混じっている場合は、大文字小文字を区別する
let g:neocomplcache_enable_smart_case = 1
" キーワードの最小長さを3文字に
let g:neocomplcache_min_syntax_length = 3
" 補完候補の先頭を選択状態に
"let g:neocomplcache_enable_auto_select = 1


"==================
" neosnippet
"==================

" スニペットのディレクトリを指定
let g:neocomplcache_snippets_dir = expand('~/.vim/snippets')
" スニペット補完のキーバインド
imap <silent><C-l> <Plug>(neocomplcache_snippets_expand)
smap <silent><C-l> <Plug>(neocomplcache_snippets_expand)
" 辞書の設定を初期化
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default': ''
    \ }


"==================
" ZenCoding
"==================

let g:user_zen_settings = {
\   'lang': 'ja',
\   'indentation': '    ',
\   'css': {
\     'filters': 'fc',
\   }
\}


"==================
" unite
"==================

" インサートモードで開始
let g:unite_enable_start_insert = 1

"imap <silent> <C-k>  <Plug>(neocomplcache_start_unite_complete)
nnoremap <silent> <Leader>uf :<C-u>Unite -buffer-name=files file<CR>
nnoremap <silent> <Leader>ub :<C-u>Unite -buffer-name=buffers buffer<CR>
nnoremap <silent> <Leader>ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> <Leader>u/ :<C-u>Unite line<CR>
nnoremap <silent> <Leader>us :<C-u>Unite source<CR>
nnoremap <silent> <Leader>uc :<C-u>Unite change<CR>
nnoremap <silent> <Leader>uj :<C-u>Unite jump<CR>
nnoremap <silent> <Leader>uu :<C-u>Unite file_mru buffer<CR>
nnoremap <silent> <Leader>ua :<C-u>Unite file buffer file_mru<CR>
nnoremap <silent> <Leader>up :<C-u>call <SID>unite_project()<CR>

function! s:unite_project(...)
  let opts = (a:0 ? join(a:000, ' ') : '')
  let dir = unite#util#path2project_directory(expand('%'))
  execute 'Unite '.opts.' file_rec:'.dir
endfunction


"==================
" unite-outline
"==================

nnoremap <silent> <Leader>uo :<C-u>Unite -no-quit -vertical -winwidth=30 outline<CR>


"==================
" vim-coffee-script
"==================

" 無名関数でラップしない
let g:coffee_make_options = '-b'


"==================
" vim-powerline
"==================

let g:Powerline_symbols = 'fancy'


"==================
" jedi
"==================

let g:jedi#show_function_definition = 0

"==================
" Conque
"==================

let g:ConqueTerm_ReadUnfocused = 1
let g:ConqueTerm_CloseOnEnd = 1
let g:ConqueTerm_StartMessages = 0
let g:ConqueTerm_CWInsert = 1
noremap <silent> <Leader>sh :ConqueTermVSplit zsh<CR>
noremap <silent> <Leader>py :ConqueTermVSplit ipython<CR>
noremap <silent> <Leader>rb :ConqueTermVSplit irb<CR>

" バッファを閉じたときにプロセスを終了するようにする
function! s:delete_ConqueTerm(buffer_name)
    let term_obj = conque_term#get_instance(a:buffer_name)
    call term_obj.close()
endfunction
autocmd BufWinLeave zsh\s-\s? call <SID>delete_ConqueTerm(expand('%'))
autocmd BufWinLeave ipython\s-\s? call <SID>delete_ConqueTerm(expand('%'))
autocmd BufWinLeave irb\s-\s? call <SID>delete_ConqueTerm(expand('%'))


"======================
" オレオレセッティング
"======================

if filereadable(expand('~/.vimrc.plugin.mine'))
  source ~/.vimrc.plugin.mine
endif


" ファイルタイプを有効にする
filetype plugin indent on
